{"ast":null,"code":"var _jsxFileName = \"/Users/ouraniantrizi/Desktop/memory-card-game/src/components/GameBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport './styles/GameBoard.css'; // Optional: for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateShuffledCards = () => {\n  const cards = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n  const doubledCards = [...cards, ...cards]; // Duplicate the cards for matching pairs\n  return doubledCards.sort(() => Math.random() - 0.5); // Shuffle the cards\n};\nfunction GameBoard() {\n  _s();\n  const [cards, setCards] = useState(generateShuffledCards());\n  const [flippedIndices, setFlippedIndices] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [moves, setMoves] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    if (flippedIndices.length === 2) {\n      // Check if the two flipped cards match\n      const [first, second] = flippedIndices;\n      if (cards[first] === cards[second]) {\n        setMatchedCards(prev => [...prev, cards[first]]);\n      }\n      // Wait for a short delay before flipping the cards back\n      setTimeout(() => setFlippedIndices([]), 1000);\n      setMoves(prev => prev + 1); // Increment the move count after every pair check\n    }\n  }, [flippedIndices, cards]);\n  useEffect(() => {\n    // If all cards are matched, the game is over\n    if (matchedCards.length === cards.length / 2) {\n      setGameOver(true);\n    }\n  }, [matchedCards, cards]);\n  const handleCardClick = index => {\n    if (flippedIndices.length === 2 || flippedIndices.includes(index) || matchedCards.includes(cards[index])) {\n      return; // Ignore clicks if already flipped or matched\n    }\n    setFlippedIndices(prev => [...prev, index]);\n  };\n  const handleReset = () => {\n    setCards(generateShuffledCards());\n    setFlippedIndices([]);\n    setMatchedCards([]);\n    setMoves(0);\n    setGameOver(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n      card: card,\n      onClick: () => handleCardClick(index),\n      isFlipped: flippedIndices.includes(index) || matchedCards.includes(card)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over\",\n      children: \"You Win!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Moves: \", moves]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"TQyJlIZbHWU3WR+wk3ROK6y/Kdo=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","Card","jsxDEV","_jsxDEV","generateShuffledCards","cards","doubledCards","sort","Math","random","GameBoard","_s","setCards","flippedIndices","setFlippedIndices","matchedCards","setMatchedCards","moves","setMoves","gameOver","setGameOver","length","first","second","prev","setTimeout","handleCardClick","index","includes","handleReset","className","children","map","card","onClick","isFlipped","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ouraniantrizi/Desktop/memory-card-game/src/components/GameBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport './styles/GameBoard.css'; // Optional: for styling\n\nconst generateShuffledCards = () => {\n  const cards = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n  const doubledCards = [...cards, ...cards]; // Duplicate the cards for matching pairs\n  return doubledCards.sort(() => Math.random() - 0.5); // Shuffle the cards\n};\n\nfunction GameBoard() {\n  const [cards, setCards] = useState(generateShuffledCards());\n  const [flippedIndices, setFlippedIndices] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [moves, setMoves] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  useEffect(() => {\n    if (flippedIndices.length === 2) {\n      // Check if the two flipped cards match\n      const [first, second] = flippedIndices;\n      if (cards[first] === cards[second]) {\n        setMatchedCards((prev) => [...prev, cards[first]]);\n      }\n      // Wait for a short delay before flipping the cards back\n      setTimeout(() => setFlippedIndices([]), 1000);\n      setMoves((prev) => prev + 1); // Increment the move count after every pair check\n    }\n  }, [flippedIndices, cards]);\n\n  useEffect(() => {\n    // If all cards are matched, the game is over\n    if (matchedCards.length === cards.length / 2) {\n      setGameOver(true);\n    }\n  }, [matchedCards, cards]);\n\n  const handleCardClick = (index) => {\n    if (flippedIndices.length === 2 || flippedIndices.includes(index) || matchedCards.includes(cards[index])) {\n      return; // Ignore clicks if already flipped or matched\n    }\n    setFlippedIndices((prev) => [...prev, index]);\n  };\n\n  const handleReset = () => {\n    setCards(generateShuffledCards());\n    setFlippedIndices([]);\n    setMatchedCards([]);\n    setMoves(0);\n    setGameOver(false);\n  };\n\n  return (\n    <div className=\"game-board\">\n      {cards.map((card, index) => (\n        <Card\n          key={index}\n          card={card}\n          onClick={() => handleCardClick(index)}\n          isFlipped={flippedIndices.includes(index) || matchedCards.includes(card)}\n        />\n      ))}\n      {gameOver && <div className=\"game-over\">You Win!</div>}\n      <div className=\"game-info\">\n        <p>Moves: {moves}</p>\n        <button onClick={handleReset}>Restart Game</button>\n      </div>\n    </div>\n  );\n}\n\nexport default GameBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}