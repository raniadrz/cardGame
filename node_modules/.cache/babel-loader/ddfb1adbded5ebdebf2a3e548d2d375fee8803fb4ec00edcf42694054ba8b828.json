{"ast":null,"code":"var _jsxFileName = \"/Users/ouraniantrizi/Desktop/memory-card-game/src/components/GameBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport './styles/GameBoard.css'; // Optional: for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateShuffledCards = () => {\n  const petImages = [\"https://spotpet.com/_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fm5ehn3s5t7ec%2F2fuHCYqv7dD3YVJuFXkjLk%2F7a71f9e933de497331924e69df24578d%2FShih_Tzu_Price.webp&w=3840&q=75\", \"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Cat03.jpg/640px-Cat03.jpg\", \"https://i.pinimg.com/736x/b8/25/e1/b825e1484a21bb183466a3890df21c39.jpg\", \"https://t4.ftcdn.net/jpg/07/18/12/87/360_F_718128776_nJReWqPkf5qF4Y5na8ZqGWAbdCJTpczZ.jpg\", \"https://cdn.i-scmp.com/sites/default/files/d8/images/methode/2021/08/05/7232924c-f50d-11eb-97f9-89051db5b6c1_image_hires_185341.jpg\", \"https://t4.ftcdn.net/jpg/02/53/61/69/360_F_253616948_za22DUrpvoM6aBDyPZxXDXf1OVNZFhL4.jpg\", \"https://www.rainforest-alliance.org/wp-content/uploads/2021/06/green-sea-turtle-1.jpg.optimal.jpg\", \"https://example.com/bird.jpg\"];\n\n  // Duplicate the images to create pairs\n  const doubledCards = [...petImages, ...petImages];\n\n  // Shuffle the cards\n  return doubledCards.sort(() => Math.random() - 0.5);\n};\nfunction GameBoard() {\n  _s();\n  const [cards, setCards] = useState(generateShuffledCards());\n  const [flippedIndices, setFlippedIndices] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [moves, setMoves] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    if (flippedIndices.length === 2) {\n      // Check if the two flipped cards match\n      const [first, second] = flippedIndices;\n      if (cards[first] === cards[second]) {\n        setMatchedCards(prev => [...prev, cards[first]]);\n      }\n      // Wait for a short delay before flipping the cards back\n      setTimeout(() => setFlippedIndices([]), 1000);\n      setMoves(prev => prev + 1); // Increment the move count after every pair check\n    }\n  }, [flippedIndices, cards]);\n  useEffect(() => {\n    // If all cards are matched, the game is over\n    if (matchedCards.length === cards.length / 2) {\n      setGameOver(true);\n    }\n  }, [matchedCards, cards]);\n  const handleCardClick = index => {\n    if (flippedIndices.length === 2 || flippedIndices.includes(index) || matchedCards.includes(cards[index])) {\n      return; // Ignore clicks if already flipped or matched\n    }\n    setFlippedIndices(prev => [...prev, index]);\n  };\n  const handleReset = () => {\n    setCards(generateShuffledCards());\n    setFlippedIndices([]);\n    setMatchedCards([]);\n    setMoves(0);\n    setGameOver(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n      card: card,\n      onClick: () => handleCardClick(index),\n      isFlipped: flippedIndices.includes(index) || matchedCards.includes(card)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over\",\n      children: \"You Win!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Moves: \", moves]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"TQyJlIZbHWU3WR+wk3ROK6y/Kdo=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","Card","jsxDEV","_jsxDEV","generateShuffledCards","petImages","doubledCards","sort","Math","random","GameBoard","_s","cards","setCards","flippedIndices","setFlippedIndices","matchedCards","setMatchedCards","moves","setMoves","gameOver","setGameOver","length","first","second","prev","setTimeout","handleCardClick","index","includes","handleReset","className","children","map","card","onClick","isFlipped","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ouraniantrizi/Desktop/memory-card-game/src/components/GameBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport './styles/GameBoard.css'; // Optional: for styling\nconst generateShuffledCards = () => {\n  const petImages = [\n    \"https://spotpet.com/_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fm5ehn3s5t7ec%2F2fuHCYqv7dD3YVJuFXkjLk%2F7a71f9e933de497331924e69df24578d%2FShih_Tzu_Price.webp&w=3840&q=75\",\n    \"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Cat03.jpg/640px-Cat03.jpg\",\n    \"https://i.pinimg.com/736x/b8/25/e1/b825e1484a21bb183466a3890df21c39.jpg\",\n    \"https://t4.ftcdn.net/jpg/07/18/12/87/360_F_718128776_nJReWqPkf5qF4Y5na8ZqGWAbdCJTpczZ.jpg\",\n    \"https://cdn.i-scmp.com/sites/default/files/d8/images/methode/2021/08/05/7232924c-f50d-11eb-97f9-89051db5b6c1_image_hires_185341.jpg\",\n    \"https://t4.ftcdn.net/jpg/02/53/61/69/360_F_253616948_za22DUrpvoM6aBDyPZxXDXf1OVNZFhL4.jpg\",\n    \"https://www.rainforest-alliance.org/wp-content/uploads/2021/06/green-sea-turtle-1.jpg.optimal.jpg\",\n    \"https://example.com/bird.jpg\"\n  ];\n  \n  // Duplicate the images to create pairs\n  const doubledCards = [...petImages, ...petImages];\n  \n  // Shuffle the cards\n  return doubledCards.sort(() => Math.random() - 0.5);\n};\n\n\nfunction GameBoard() {\n  const [cards, setCards] = useState(generateShuffledCards());\n  const [flippedIndices, setFlippedIndices] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [moves, setMoves] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  useEffect(() => {\n    if (flippedIndices.length === 2) {\n      // Check if the two flipped cards match\n      const [first, second] = flippedIndices;\n      if (cards[first] === cards[second]) {\n        setMatchedCards((prev) => [...prev, cards[first]]);\n      }\n      // Wait for a short delay before flipping the cards back\n      setTimeout(() => setFlippedIndices([]), 1000);\n      setMoves((prev) => prev + 1); // Increment the move count after every pair check\n    }\n  }, [flippedIndices, cards]);\n\n  useEffect(() => {\n    // If all cards are matched, the game is over\n    if (matchedCards.length === cards.length / 2) {\n      setGameOver(true);\n    }\n  }, [matchedCards, cards]);\n\n  const handleCardClick = (index) => {\n    if (flippedIndices.length === 2 || flippedIndices.includes(index) || matchedCards.includes(cards[index])) {\n      return; // Ignore clicks if already flipped or matched\n    }\n    setFlippedIndices((prev) => [...prev, index]);\n  };\n\n  const handleReset = () => {\n    setCards(generateShuffledCards());\n    setFlippedIndices([]);\n    setMatchedCards([]);\n    setMoves(0);\n    setGameOver(false);\n  };\n\n  return (\n    <div className=\"game-board\">\n      {cards.map((card, index) => (\n        <Card\n          key={index}\n          card={card}\n          onClick={() => handleCardClick(index)}\n          isFlipped={flippedIndices.includes(index) || matchedCards.includes(card)}\n        />\n      ))}\n      {gameOver && <div className=\"game-over\">You Win!</div>}\n      <div className=\"game-info\">\n        <p>Moves: {moves}</p>\n        <button onClick={handleReset}>Restart Game</button>\n      </div>\n    </div>\n  );\n}\n\nexport default GameBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}